//接下来，我们要干一件使用Node很有成就感的一件事
//你可以使用Node非常轻松的构建一个Web服务器
//在Node中专门提供了一个核心模块：http
//http这个模块的职责就是帮你创建编写服务器的

// 就像你操作文件一样，先加载核心模块：require http

// 1.加载http核心模块
var http = require('http')
// 变量名可以随便起，但是模块名是固定的
// 但是变量名最好起个有意义的名字


// 2.使用http.createServer()方法创建一个Web服务器
// 返回一个Server实例
// 服务器都是用代码写出来的
// Apache就是一个服务器，它是别人写好的封装好的一个软件
// 而我们这里是在写代码开发服务器
var server = http.createServer();

// 3.服务器用来干嘛的?
//      提供服务的：对于数据的服务
//      浏览器输入地址敲回车：发送请求
//      服务器：接收请求，处理请求，给个反馈(发送响应)

server.on('request', function () { 
    // 注册request请求事件
    // 当服务器收到请求之后，会自动触发服务器的request请求事件，然后执行第二段参数：回调处理函数
    console.log('收到客户端的请求了');
    // 只要客户端发请求过来，服务器都会输出一个信息
    // 服务器如果启动成功后，就开始等待客户端发送请求，一旦发送请求就会打印这句话
})

// 4.虽然前面已经设置好了，但是你得先启动你的服务器
// 怎么启动呢？绑定端口号就可以启动服务器了
// 端口号是干什么的？为什么要绑定它？--服务器是干嘛的？是用来网络通信的，凡是涉及到网络通信的都要有端口号
// 端口号范围1-65535，只要不被占用(这个是前提！！)，在里面随便选个数字都行，老师习惯写3000

// server.listen(3000);

// 也可以给它第二个参数，回调函数
server.listen(3000, function () { 
    console.log('服务器启动成功了，可以通过http://127.0.0.1:3000/或者localhost来进行访问');
    // 由于服务器的启动需要时间，第二个参数算是服务器启动的日志
})

// 当你输入node .\05-http.js后终端和以前的不一样(光标一直闪，你也输入不了东西)，
// 没关系，这个时候表明服务器已经启动了，你不要把窗口给关了

// 现在这个服务还很弱，只能发请求(回车)，然后服务器输出一句话"收到客户端的请求了"
// 发一次请求服务器回一句话，发一次请求服务器再回一句话，其他的就做不了了